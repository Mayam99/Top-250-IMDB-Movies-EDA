# -*- coding: utf-8 -*-
"""Top 250 IMDB Movies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PUHCUJiCkgzsV5DYX5Tfmk7JX_wFKnt3

The Top 250 IMDb Movies dataset is a collection of information about the top-rated movies according to user ratings on the IMDb (Internet Movie Database) platform. IMDb is one of the most popular online databases for movies, television shows, and other entertainment content, and its Top 250 list is highly regarded by movie enthusiasts and critics alike.

This dataset typically includes details such as movie title, release year, genre, director, actors, IMDb rating, number of votes, and duration. It provides valuable insights into the characteristics and trends of highly-rated films across different genres, directors, and time periods.

Exploratory Data Analysis (EDA) of this dataset involves analyzing and visualizing various aspects of the data to uncover patterns, relationships, and interesting insights. By examining factors such as movie ratings, genres, directors, and release years, EDA can help us better understand what makes a movie highly regarded by audiences and critics.

##Importing Necessary Libraries
"""

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

"""##Loading the dataset"""

df= pd.read_csv("movies.csv")

"""###Visualizing the DataSet"""

df

df.head()

df.info()

df.columns

df.describe()

"""##Checking if there are any null values"""

df.isnull().sum()

"""###There is a null value in certificate
Dropping the null value
"""

df = df.dropna()

df.isnull().sum()

import pandas as pd

# Replace commas in numeric values in a specific column
df['imbd_votes'] = df['imbd_votes'].str.replace(',', '')

# Convert the column to numeric data type
df['imbd_votes'] = pd.to_numeric(df['imbd_votes'])

# Now, the commas in numeric values have been removed, and the column is of numeric data type

df.head(10)

"""###Converting the duration column data into int. format for preprocessing"""

for duration in df['duration'].values[:10]:
    hours = 0
    minutes = 0
    if 'h' in duration:
        hours = int(duration.split('h')[0])
    if 'm' in duration:
        minutes = int(duration.split('m')[0].split()[-1])
    total_minutes = hours * 60 + minutes
    print('Duration:', duration, '| Total Minutes:', total_minutes)

duration = [
    (int(i.split(' ')[0].replace('h', '')) * 60) + int(i.split(' ')[1].replace('m', '')) if 'h' in i and 'm' in i
    else int(i.replace('h', '')) * 60 if 'h' in i and 'm' not in i
    else int(i.replace('m', ''))
    for i in df['duration'].values
]

df['duration']= duration

df.head()

"""###1) Finding the range of years covered in the dataset"""

# Extract release years from the 'year' column
release_years = df['year']

# Find the minimum and maximum release years
min_year = release_years.min()
max_year = release_years.max()

# Print the range of years covered in the dataset
print("Range of years covered in the dataset:", min_year, "-", max_year)

"""###2) the distribution of IMDb ratings differ between movies with a "PG" certification and
those with an "R" certification
"""

import matplotlib.pyplot as plt

# Filter movies with "PG" certificate
pg_movies = df[df['certificate'] == "PG"]['imbd_rating']

# Filter movies with "R" certificate
r_movies = df[df['certificate'] == "R"]['imbd_rating']

# Create a box plot to compare the distribution of IMDb ratings
plt.figure(figsize=(10, 6))
plt.boxplot([pg_movies, r_movies], labels=['PG', 'R'])
plt.title('Distribution of IMDb Ratings by Certification')
plt.xlabel('Certification')
plt.ylabel('IMDB Rating')
plt.show()

# Create histograms to compare the distribution of IMDB ratings
plt.figure(figsize=(10, 6))
plt.hist(pg_movies, bins=20, alpha=0.5, label='PG', color='blue')
plt.hist(r_movies, bins=20, alpha=0.5, label='R', color='red')
plt.title('Distribution of IMDb Ratings by Certificate')
plt.xlabel('IMDb Rating')
plt.ylabel('Frequency')
plt.legend()
plt.show()

"""###3) The Average duration of movies in the dataset?"""

# Calculate the average duration of movies
average_duration = df['duration'].mean()

# Print the average duration
print("Average duration of movies:", average_duration, "minutes")

"""###4) Finding the movie has the highest IMDB rating"""

# Find the index of the movie with the highest IMDb rating
highest_rating_index = df['imbd_rating'].idxmax()

# Get the title of the movie with the highest IMDb rating
movie_with_highest_rating = df.loc[highest_rating_index, 'title']

# Print the title of the movie with the highest IMDb rating
print("Movie with the highest IMDb rating:", movie_with_highest_rating)

"""###5) Movies have IMDb ratings above 8.5"""

# Count the number of movies with IMDb ratings above 8.5
num_movies_above_8_5 = df[df['imbd_rating'] > 8.5].shape[0]

# Print the number of movies with IMDb ratings above 8.5
print("Number of movies with IMDb ratings above 8.5:", num_movies_above_8_5)

"""###6) The most common movie certification"""

# Find the most common movie certification
most_common_certification = df['certificate'].value_counts().idxmax()

# Print the most common movie certification
print("Most common movie certification:", most_common_certification)

"""###7) Movies fall under the "Drama" genre"""

# Count the number of movies that fall under the "Drama" genre
num_drama_movies = df[df['genre'].str.contains('Drama')].shape[0]

# Print the number of movies that fall under the "Drama" genre
print("Number of movies that fall under the 'Drama' genre:", num_drama_movies)

"""###8) The distribution of movie durations in the dataset"""

# Create a histogram to visualize the distribution of movie durations
plt.figure(figsize=(10, 6))
plt.hist(df['duration'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Movie Durations')
plt.xlabel('Duration (minutes)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""###9) Movies were released in the 1970s"""

# Count the number of movies released in the 1970s
num_movies_1970s = df[(df['year'] >= 1970) & (df['year'] < 1980)].shape[0]

# Print the number of movies released in the 1970s
print("Number of movies released in the 1970s:", num_movies_1970s)

"""###10) Genre that has the highest average IMDB rating"""

# Splitting genres into separate rows
genres_df = df['genre'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('genre')
df_split = df.drop('genre', axis=1).join(genres_df)

# Grouping by genre and calculating the mean IMDb rating for each genre
genre_avg_rating = df_split.groupby('genre')['imbd_rating'].mean()

# Finding the genre with the highest average IMDb rating
highest_avg_rating_genre = genre_avg_rating.idxmax()
highest_avg_rating = genre_avg_rating.max()

# Print the genre with the highest average IMDb rating
print("Genre with the highest average IMDb rating:", highest_avg_rating_genre)
print("Average IMDb rating for this genre:", highest_avg_rating)

"""###11)  The median IMDb rating of the movies"""

# Calculate the median IMDb rating of the movies
median_imdb_rating = df['imbd_rating'].median()

# Print the median IMDb rating
print("Median IMDb rating of the movies:", median_imdb_rating)

"""###12) Movies have IMDb ratings between 8.0 and 8.5"""

# Calculate the median IMDb rating of the movies
median_imdb_rating = df['imbd_rating'].median()

# Print the median IMDb rating
print("Median IMDb rating of the movies:", median_imdb_rating)

"""###13) Average number of IMDb votes for movies in the dataset"""

# Calculate the average number of IMDb votes for movies
average_num_votes = df['imbd_votes'].mean()

# Print the average number of IMDb votes
print("Average number of IMDb votes for movies:", average_num_votes)

"""###14) Movies have a duration of exactly 2 hours"""

# Count the number of movies with a duration of exactly 2 hours (120 minutes)
num_movies_2_hours = df[df['duration'] == 120].shape[0]

# Print the number of movies with a duration of exactly 2 hours
print("Number of movies with a duration of exactly 2 hours:", num_movies_2_hours)

"""###15) The distribution of IMDb ratings across different certification types?"""

import seaborn as sns
import matplotlib.pyplot as plt

# Create a box plot to visualize the distribution of IMDb ratings across different certification types
plt.figure(figsize=(12, 8))
sns.boxplot(x='certificate', y='imbd_rating', data=df)
plt.title('Distribution of IMDb Ratings Across Different Certification Types')
plt.xlabel('Certification Type')
plt.ylabel('IMDb Rating')
plt.xticks(rotation=45)
plt.show()

# Create a violin plot to visualize the distribution of IMDb ratings across different certification types
plt.figure(figsize=(12, 8))
sns.violinplot(x='certificate', y='imbd_rating', data=df)
plt.title('Distribution of IMDb Ratings Across Different Certification Types')
plt.xlabel('Certification Type')
plt.ylabel('IMDb Rating')
plt.xticks(rotation=45)
plt.show()

"""###16) Movies have IMDb ratings above 9.0 and fall under the "Drama" genre"""

# Count the number of movies with IMDb ratings above 9.0 and fall under the "Drama" genre
num_high_rating_drama_movies = df[(df['imbd_rating'] > 9.0) & (df['genre'].str.contains('Drama'))].shape[0]

# Print the number of movies with IMDb ratings above 9.0 and fall under the "Drama" genre
print("Number of movies with IMDb ratings above 9.0 and fall under the 'Drama' genre:", num_high_rating_drama_movies)

"""###17) The most common IMDb rating range among the movies?"""

# Define the IMDb rating ranges (bins)
bins = [0, 2, 4, 6, 8, 10]

# Create a new column to categorize IMDb ratings into bins
df['imdb_rating_range'] = pd.cut(df['imbd_rating'], bins)

# Count the frequency of movies in each IMDb rating range
rating_range_counts = df['imdb_rating_range'].value_counts()

# Find the most common IMDb rating range
most_common_rating_range = rating_range_counts.idxmax()

# Print the most common IMDb rating range
print("Most common IMDb rating range among the movies:", most_common_rating_range)

"""###18) Movies have IMDb ratings between 8.0 and 9.0 and are certified as "R"""

# Count the number of movies with IMDb ratings between 8.0 and 9.0 and certified as "R"
num_movies_8_to_9_r_certified = df[(df['imbd_rating'] >= 8.0) & (df['imbd_rating'] <= 9.0) & (df['certificate'] == "R")].shape[0]

# Print the number of movies with IMDb ratings between 8.0 and 9.0 and certified as "R"
print("Number of movies with IMDb ratings between 8.0 and 9.0 and certified as 'R':", num_movies_8_to_9_r_certified)

"""###19) The distribution of IMDb ratings vary across different decades"""

# Define the bins for decades
decade_bins = range(1920, 2031, 10)

# Create a new column to represent the decade each movie was released in
df['decade'] = pd.cut(df['year'], bins=decade_bins, labels=[str(year) + 's' for year in range(1920, 2030, 10)])

# Plot the distribution of IMDb ratings for each decade
plt.figure(figsize=(12, 8))
sns.boxplot(x='decade', y='imbd_rating', data=df)
plt.title('Distribution of IMDB Ratings Across Different Decades')
plt.xlabel('Decade')
plt.ylabel('IMDB Rating')
plt.xticks(rotation=45)
plt.show()

"""###20) The movie has the longest duration and what is it's IMDB rating"""

# Find the index of the movie with the longest duration
longest_duration_index = df['duration'].idxmax()

# Get the title and IMDb rating of the movie with the longest duration
longest_duration_movie_title = df.loc[longest_duration_index, 'title']
longest_duration_imdb_rating = df.loc[longest_duration_index, 'imbd_rating']

# Print the title and IMDb rating of the movie with the longest duration
print("Movie with the longest duration:", longest_duration_movie_title)
print("IMDb rating of the movie:", longest_duration_imdb_rating)

"""##Based on the analysis of the Top 250 IMDb Movies dataset, several key findings and interesting trends can be observed:

###Certainly! Here's a concise summary of key findings and interesting trends observed in the Top 250 IMDb Movies dataset:

Genres: Drama is the most common genre, suggesting a preference for compelling storytelling.

Ratings: IMDb ratings vary widely, with some movies receiving exceptionally high ratings.

Certifications: "R" certifications are prevalent, indicating mature content in many movies.

Duration: Movies range from short films to lengthy epics, showcasing diverse storytelling styles.

Release Years: Spanning several decades, the dataset reflects a rich history of cinema and evolving trends over time.

These findings highlight the diversity and richness of acclaimed cinema represented in the dataset, offering insights into audience preferences, cultural influences, and the evolution of filmmaking practices.
"""